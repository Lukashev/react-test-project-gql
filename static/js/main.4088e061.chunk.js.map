{"version":3,"sources":["AppContext.js","components/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","Card","name","_id","id","children","useContext","activeCards","setActiveCard","isActive","useMemo","find","cardId","childProps","style","display","parentProps","fontWeight","setActiveCallback","useCallback","newActiveCards","length","includes","filter","concat","substring","className","onClick","bind","map","item","index","code","key","dataQuery","gql","App","useState","useQuery","loading","error","data","Provider","value","continents","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"ySAIeA,G,MAFIC,IAAMC,iBCuDVC,EAtDF,SAAPA,EAAQ,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAUC,EAAoB,EAAxBC,GAASC,EAAe,EAAfA,SAAe,EACLC,qBAAWR,GAA1CS,EADoC,EACpCA,YAAaC,EADuB,EACvBA,cACfC,EAAWC,mBAAQ,kBAAMH,EAAYI,MAAK,SAACC,GAAD,OAAYA,IAAWT,OAAM,CAC3EI,EACAJ,IAGIU,EAAa,CACjBC,MAAO,CACLC,QAASN,EAAW,QAAU,SAI5BO,EAAc,CAClBF,MAAO,CACLG,WAAYR,GAAYJ,EAAW,OAAS,WAI1Ca,EAAoBC,uBACxB,SAACf,GACC,IAAMgB,EACJf,GAAYA,EAASgB,OACjBd,EAAYe,SAASlB,GACnBG,EAAYgB,QAAO,SAACX,GAAD,OAAYA,IAAWR,KAC1CG,EAAYiB,OAAOpB,GACrBG,EAAYgB,QACV,SAACX,GAAD,OAAaA,EAAOU,SAASnB,EAAIsB,UAAU,EAAG,OAEtDjB,EAAcY,KAEhB,CAACZ,EAAeD,EAAaF,EAAUF,IAGzC,OACE,oCACE,uCACEuB,UAAU,kBACVC,QAAST,EAAkBU,KAAK,KAAMzB,IAClCa,GAEJ,6BAAMd,IAER,uCAAKwB,UAAU,wBAA2Bb,GACvCR,GACCA,EAASwB,KAAI,SAACC,EAAMC,GAClB,IAAM3B,EAAE,UAAMD,GAAN,OAAY2B,EAAKE,MAAjB,OAAwBD,GAChC,OAAO,kBAAC9B,EAAD,eAAMgC,IAAK7B,GAAQ0B,EAAnB,CAAyB1B,GAAIA,W,0RC3ChD,IAAM8B,EAAYC,YAAH,KAmCAC,MAlBf,WAAgB,IAAD,EACwBC,mBAAS,IADjC,mBACN9B,EADM,KACOC,EADP,OAEyB8B,YAASJ,GAAvCK,EAFK,EAELA,QAASC,EAFJ,EAEIA,MAFJ,IAEWC,YAFX,MAEkB,GAFlB,EAGb,OAAIF,EAAgB,yCAChBC,EAAc,uCAGhB,kBAAC,EAAWE,SAAZ,CAAqBC,MAAO,CAAEpC,cAAaC,kBACzC,yBAAKkB,UAAU,OACZe,EAAKG,WAAWf,KAAI,SAACC,EAAMC,GAC1B,IAAM3B,EAAE,UAAM0B,EAAKE,MAAX,OAAkBD,GAC1B,OAAO,kBAAC,EAAD,eAAME,IAAK7B,GAAQ0B,EAAnB,CAAyB1B,GAAIA,WCvB1ByC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVAC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,wCAGPC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAgBL,OAAQA,GACtB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxB,GACLyB,QAAQzB,MAAMA,EAAM0B,c","file":"static/js/main.4088e061.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nconst AppContext = React.createContext()\r\n\r\nexport default AppContext\r\n","import React, { useContext, useCallback, useMemo } from \"react\"\r\nimport AppContext from \"../AppContext\"\r\n\r\nconst Card = ({ name, id: _id, children }) => {\r\n  const { activeCards, setActiveCard } = useContext(AppContext)\r\n  const isActive = useMemo(() => activeCards.find((cardId) => cardId === _id), [\r\n    activeCards,\r\n    _id,\r\n  ])\r\n\r\n  const childProps = {\r\n    style: {\r\n      display: isActive ? \"block\" : \"none\",\r\n    },\r\n  }\r\n\r\n  const parentProps = {\r\n    style: {\r\n      fontWeight: isActive && children ? \"bold\" : \"normal\",\r\n    },\r\n  }\r\n\r\n  const setActiveCallback = useCallback(\r\n    (id) => {\r\n      const newActiveCards =\r\n        children && children.length\r\n          ? activeCards.includes(id)\r\n            ? activeCards.filter((cardId) => cardId !== id)\r\n            : activeCards.concat(id)\r\n          : activeCards.filter(\r\n              (cardId) => !cardId.includes(_id.substring(0, 2))\r\n            )\r\n      setActiveCard(newActiveCards)\r\n    },\r\n    [setActiveCard, activeCards, children, _id]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"card__container\"\r\n        onClick={setActiveCallback.bind(null, _id)}\r\n        {...parentProps}\r\n      >\r\n        <div>{name}</div>\r\n      </div>\r\n      <div className=\"card__container_list\" {...childProps}>\r\n        {children &&\r\n          children.map((item, index) => {\r\n            const id = `${_id}${item.code}${index}`\r\n            return <Card key={id} {...item} id={id} />\r\n          })}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React, { useState } from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\nimport { gql } from \"apollo-boost\"\nimport \"./App.scss\"\nimport Card from \"./components/Card\"\nimport AppContext from \"./AppContext\"\n\nconst dataQuery = gql`\n  {\n    continents(filter: {}) {\n      code\n      name\n      children: countries {\n        code\n        name\n        children: languages {\n          code\n          name\n        }\n      }\n    }\n  }\n`\n\nfunction App() {\n  const [activeCards, setActiveCard] = useState([])\n  const { loading, error, data = {} } = useQuery(dataQuery)\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :(</p>\n\n  return (\n    <AppContext.Provider value={{ activeCards, setActiveCard }}>\n      <div className=\"App\">\n        {data.continents.map((item, index) => {\n          const id = `${item.code}${index}`\n          return <Card key={id} {...item} id={id} />\n        })}\n      </div>\n    </AppContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.scss\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\nimport ApolloClient from \"apollo-boost\"\nimport { ApolloProvider } from \"@apollo/react-hooks\"\n\nconst client = new ApolloClient({\n  uri: \"https://countries.trevorblades.com/\",\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}